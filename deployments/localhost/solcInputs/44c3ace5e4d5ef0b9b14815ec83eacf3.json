{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/Fund.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\ncontract Fund{\n    event DrawFund(address,uint256);\n    event Refund(address,uint256);\n\n    // 外部合约:喂价数据\n    AggregatorV3Interface public dataFeed;\n\n    // 合约所有者\n    address public owner;\n\n    // 合约投资者支付金额\n    mapping(address => uint256) public fundAmount;\n    // 合约融资目标\n    uint256 constant private CONTRACT_TARGET_USD_AMOUNT = 2;\n    // 投资最小金额(USD)\n    uint256 constant private FUND_MIN_USD_AMOUNT = 1;\n    // 合约生效时间(部署时间)\n    uint256 private FUND_EXEC_TIMESTAMP;\n    // 合约关闭时间\n    uint256 private FUND_CLOSE_TIMESTAMP;\n\n    // 合约构造函数\n    constructor(uint256 deployMentTime, address dataFeedAddress) {\n        dataFeed = AggregatorV3Interface(dataFeedAddress);\n        owner = msg.sender;\n        FUND_EXEC_TIMESTAMP = block.timestamp;\n        FUND_CLOSE_TIMESTAMP = FUND_EXEC_TIMESTAMP + deployMentTime;\n    }\n\n    //**********************************************************************//\n    // 合约投资\n    function fund() external payable{\n        require(block.timestamp < FUND_CLOSE_TIMESTAMP,\"fund is close~\");\n        require(fundAmount[msg.sender] == 0, \"you have fund~\");\n        require(ethToUsd(msg.value) >= FUND_MIN_USD_AMOUNT, \"send more eth~\");\n        fundAmount[msg.sender] = msg.value;\n    }\n    // 合约退款\n    function refund() external {\n        require(block.timestamp >= FUND_CLOSE_TIMESTAMP,\"fund is exec~\");\n        require(ethToUsd(address(this).balance) < CONTRACT_TARGET_USD_AMOUNT,\"target is reached~\");\n        require(fundAmount[msg.sender] != 0, \"there is no fund for you~\");\n        uint256 amount = fundAmount[msg.sender];\n        fundAmount[msg.sender] = 0; // 先将余额置零，防止重入攻击\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success,\"refund transfer failed~\");\n        emit Refund(msg.sender, amount);\n    }\n    // 合约提款\n    function drawFund() external onlyOWner{\n        require(block.timestamp >= FUND_CLOSE_TIMESTAMP,\"fund is exec~\");\n        require(ethToUsd(address(this).balance) >= CONTRACT_TARGET_USD_AMOUNT, \"target is not reached~\");\n\n        uint256 balance = address(this).balance;\n        bool success;\n        (success, )= payable(msg.sender).call{ value: balance }(\"\");\n        require(success,\"draw transfer failed~\");\n        fundAmount[msg.sender] = 0;\n        emit DrawFund(msg.sender, balance);\n    }\n    // 更换合约所有者\n    function transferContractOwner(address _owner) external onlyOWner{\n        owner = _owner;\n    }\n    //**********************************************************************//\n\n    // 获取最新ETH/USD价格数据\n    function getChainlinkDataFeedLatestAnswer() private view returns (int) {\n        ( ,int answer, , ,) = dataFeed.latestRoundData();\n        return answer;\n    }\n\n    // eth转usd\n    function ethToUsd(uint256 weiAmount) internal view returns(uint256) {\n        uint256 price = uint256(getChainlinkDataFeedLatestAnswer());\n        return price * weiAmount / (10 ** 26); \n    }\n    \n    // 仅允许合约所有者调用\n    modifier onlyOWner(){\n       require(msg.sender == owner,\"you not is contract owner~\");_;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}